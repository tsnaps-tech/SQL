# BIT_DB SQL Lite Queries - quantity statistics about customer and order data

#SELECT * FROM BIT_DB.customers LIMIT 20

SELECT * FROM BIT_DB.FebSales LIMIT 20

#Question #1
--How many orders were placed in January?
--Remember to filter out the blank and incorrect order IDs like we did in the "dealing with messy data" section of the previous lesson!

#Question #2
How many of those orders were for an iPhone?

SELECT COUNT(orderid)
FROM BIT_DB.JanSales 
WHERE length(orderid) = 6
AND orderid <> 'Order ID'
AND Product = 'iPhone';

#Question #3
Select the customer account numbers for all the orders that were placed in February.

SELECT distinct acctnum
FROM BIT_DB.customers cust

INNER JOIN BIT_DB.FebSales Feb
ON cust.order_id=FEB.orderid
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

#Question #4
Which product was the cheapest one sold in January, and what was the price?

SELECT distinct product price
FROM BIT_DB.JanSales
WHERE price in (SELECT min(price) FROM BIT_DB.JanSales);

SELECT distinct product, min(price)
FROM BIT_DB.JanSales
GROUP BY product, price
ORDER by price ASC
LIMIT 1

#Question #5
What is the total revenue for each product sold in January?
(Revenue can be calculated using the number of products sold and the price of the products).

SELECT sum(quantity)*price as revenue
,product
FROM BIT_DB.JanSales
GROUP BY product;

SELECT orderid, quantity, price, product
FROM BIT_DB.JanSales;

SELECT SUM(quantity), price, product
FROM BIT_DB.JanSales
GROUP BY product, price;

SELECT SUM(quantity)*price as Revenue
,product
FROM BIT_DB.JanSales
GROUP BY product;

#Question #6
Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?

SELECT * FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'

SELECT sum(Quantity),
product,
sum(quantity)*price as revenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY product;

#7 Question #7
How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?

SELECT count(distinct cust.acctnum),
avg(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid = cust.order_id
WHERE Feb.Quantity>2
AND length(orderid) = 6
AND orderid <> 'Order ID';

##1. 
SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate between '02/13/19 00:00' AND '02/18/19 00:00'

##2. 
SELECT location
FROM BIT_DB.FebSales 
WHERE orderdate = '02/18/19 01:35'

##3. 
SELECT sum(quantity)
FROM BIT_DB.FebSales 
WHERE orderdate like '02/18/19%'

##1. 
SELECT distinct Product
FROM BIT_DB.FebSales
WHERE Product like '%Batteries%'

##2. 
SELECT distinct Product, Price
FROM BIT_DB.FebSales 
WHERE Price like '%.99'

--List all the products sold in Los Angeles in February, and include how many of each were sold.
SELECT Product, SUM(quantity)
FROM BIT_DB.FebSales
WHERE location like'%Los Angeles%'
GROUP BY Product

--#1 Which locations in New York received at least 3 orders in January, and how many orders did they each receive? (Hint: use HAVING).
SELECT distinct location, count(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
AND length(orderid) = 6 
AND orderid <> 'Order ID'
GROUP BY location
HAVING count(orderID)>2

--#2 How many of each type of headphone were sold in February?
SELECT sum(Quantity) as quantity,
Product
FROM BIT_DB.FebSales 
WHERE Product like '%Headphones%'
GROUP BY Product

--#3 What was the average amount spent per account in February? 
--(Hints: For this question, we want the average amount spent / number of accounts, not the amount spent by each account. To multiply, you can use the * symbol, and to divide, you can use the / symbol.)
SELECT sum(quantity*price)/count(cust.acctnum)
FROM BIT_DB.FebSales Feb

LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id

WHERE length(orderid) = 6 
AND orderid <> 'Order ID'

# OR # 

SELECT avg(quantity*price)
FROM BIT_DB.FebSales Feb

LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id

WHERE length(orderid) = 6 
AND orderid <> 'Order ID'

--#4 What was the average quantity of products purchased per account in February? 
--(Hint: just like question 3, we want the overall average, not the average for each account individually).
SELECT sum(quantity)/count(cust.acctnum)
FROM BIT_DB.FebSales Feb

LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id

WHERE length(orderid) = 6 
AND orderid <> 'Order ID'

--#5 Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT product, 
sum(quantity*price)
FROM BIT_DB.JanSales 
GROUP BY product
ORDER BY sum(quantity*price) desc 
LIMIT 1

--# EXPLANATION #1 
--# "Why do we use SUM(quantity*price) instead of SUM(quantity)*price?"
--# In this question, we are using GROUP BY product. 
--# The price of each individual product doesn't change. 
--# That's why SUM(quantity*price) and SUM(quantity)*price, in this specific question, both give the same results. 

--# To visualize this, run the following SQL and look at the results:
select sum(quantity),
price,
sum(quantity)*price as revenue,
sum(quantity*price) as revenue2,
product 
FROM BIT_DB.JanSales
group by product

--# EXPLANATION #2
--# "Why can't I just use sum(price) instead of sum(quantity*price)?"
--# In this case, there's no difference between sum(price) and sum(quantity*price).
--# However, the correct answer is sum(quantity*price), because revenue is calculated by multiplying the price of the product by the number sold. 
--# In this data, each product is sold for only one price, so you can get the same answer with sum(price). 
--# But not every dataset will be that simple, and it's best not to assume that's the case.
--# If the product was sold for different prices on different days, sum(price) wouldn't give the correct answer. 
